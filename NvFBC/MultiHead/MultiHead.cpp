/*!
 * \brief
 * Demonstrates how to grab the frame buffers from multiple displays
 * using NvFBC, by creating multiple NvFBC objects. 
 *
 * \file
 *
 * This sample demonstrates how to grab the frame buffers from multiple displays 
 * using NvFBC. This is done by creating multiple NvFBC objects (one for each adapter),
 * incrementing the NVFBC_TARGET_ADAPTER environment variable before each
 * NvFBC_CreateFunction call, up to the maximum number of adapters in the system.
 * This is accomplished with a helper class in NvFBCLibrary.h (in the Util folder)
 * that initializes the NvFBC dll, sets pointers to the dll functions, and provides 
 * methods to set the TargetAdapter and create the NvFBC device.
 *
 * \copyright
 * CopyRight 1993-2016 NVIDIA Corporation.  All rights reserved.
 * NOTICE TO LICENSEE: This source code and/or documentation ("Licensed Deliverables")
 * are subject to the applicable NVIDIA license agreement
 * that governs the use of the Licensed Deliverables.
 */

#include <windows.h>
#include <d3d9.h>

#include <NvFBCLibrary.h>
#include <NvFBC/nvFBCToSys.h>

#include <Bitmap.h>

#include <string>
#include <stdio.h>

/*!
 * Wrapper class around NvFBC.
 */ 
class Grabber
{
    //! Make sure the copy construct and assignment operator are not generated by the compiler
    Grabber(const Grabber &);
    Grabber &operator=(const Grabber &);

public:
    Grabber()
        : toSys(NULL)
        , frameBuffer(NULL)
        , adapterNum(0)
    {
        // Initialize the grabInfo width and height so
        // that a call to getFrameBuffer will return
        // valid data before the first call to grabFrame
        grabInfo.dwWidth = 0;
        grabInfo.dwHeight = 0;
    }

    ~Grabber()
    {
        if(NULL != toSys)
            toSys->NvFBCToSysRelease();

        toSys = NULL;
    }

    /*!
     * Setup NvFBC based on the Direct3D9 adapter
     */ 
    bool setupGrabber(NvFBCLibrary &library, UINT adapterNum)
    {
        NVFBCRESULT fbcRes = NVFBC_SUCCESS;
        NvFBCCreateParams createParams;
        memset(&createParams, 0, sizeof(createParams));
        createParams.dwVersion = NVFBC_CREATE_PARAMS_VER;
        createParams.dwInterfaceType = NVFBC_TO_SYS;
        createParams.dwAdapterIdx = adapterNum;
        
        this->adapterNum = adapterNum;
        
        //! Create an instance of NvFBCToSys
        fbcRes = library.createEx(&createParams);
        toSys = (NvFBCToSys *)createParams.pNvFBC;

        if(fbcRes != NVFBC_SUCCESS || !toSys)
        {
            fprintf(stderr, __FUNCTION__": Unable to create an instance of NvFBC for adapter %d\n", adapterNum);
            return false;
        }

        //! Setup NvFBCToSys to grab the desktop without the mouse as RGB.
        NVFBC_TOSYS_SETUP_PARAMS params = {0};
        params.dwVersion = NVFBC_TOSYS_SETUP_PARAMS_VER;
        params.eMode = NVFBC_TOSYS_ARGB;
        params.bWithHWCursor = FALSE;
        params.bDiffMap = FALSE;
        params.ppBuffer = &frameBuffer;
        params.ppDiffMap = NULL;
        
        NVFBCRESULT res = toSys->NvFBCToSysSetUp(&params);
        if(res != NVFBC_SUCCESS)
        {
            fprintf(stderr, __FUNCTION__": ToSysSetUp failed for adapter %d\n", adapterNum);
        }

        return true;
    }

    /*!
     * Grab a frame
     */ 
    bool grabFrame()
    {
        if (toSys)
        {
            NVFBC_TOSYS_GRAB_FRAME_PARAMS params = {0};
            params.dwVersion = NVFBC_TOSYS_GRAB_FRAME_PARAMS_VER;
            params.dwFlags = NVFBC_TOSYS_NOFLAGS;
            params.eGMode = NVFBC_TOSYS_SOURCEMODE_FULL;
            params.pNvFBCFrameGrabInfo = &grabInfo;
            
            NVFBCRESULT res = toSys->NvFBCToSysGrabFrame(&params);
            if(res != NVFBC_SUCCESS)
            {
                fprintf(stderr, __FUNCTION__": ToSysEndGrabFrame failed for adapter %d\n", adapterNum);
                return false;
            }
            return true;
        }
        fprintf(stderr, __FUNCTION__": NVFBC session not created for adapter %d\n", adapterNum);
        return false;
    }

    /*!
     * Get the framebuffer. Note this always returns the last frame grabbed, 
     * this is not thread safe and should always be called from the same thread 
     * which is calling grabFrame.  If this method is called before the first 
     * grabFrame the returned buffer will be NULL and the width and height will
     * both be zero. 
     */
    void *getFrameBuffer(int &width, int &height)
    {
        width = grabInfo.dwWidth;
        height = grabInfo.dwHeight;

        return frameBuffer;
    }

protected:
    //! pointer to NvFBCToSys object
    NvFBCToSys         *toSys;

    //! grab info for NvFBC frame
    NvFBCFrameGrabInfo grabInfo;

    //! pointer to frame buffer
    void               *frameBuffer;

    //! adapter ordinal
    UINT                adapterNum;
};

/*!
 * Main program
 */
int main(int argc, char **argv)
{
    UINT adapterCnt = 0;
    NvFBCLibrary nvfbcLibrary;
    Grabber *adapterSet = NULL;
    IDirect3D9 *pd3d9 = NULL;

    //! Load the NvFBC dll
    nvfbcLibrary.load();

    //! Create an instace of Direct3D9, it is needed to get the number of adapters, 
	//! the Direct3D9 adapter order is used by NvFBC.  Direct3D9 may not return 
	//! adapters in the same order as other methods of getting the configured
    //! adapters.
    pd3d9 = Direct3DCreate9(D3D_SDK_VERSION);

    if(pd3d9)
    {
        //! Get the number of adapters
        adapterCnt = pd3d9->GetAdapterCount();
        adapterSet = new Grabber[adapterCnt];

        //! Setup one grabber for each adapter
        int iOk = 0;
        for(UINT cnt = 0; cnt < adapterCnt; ++cnt)
        {
            if(!adapterSet[cnt].setupGrabber(nvfbcLibrary, cnt))
            {
                fprintf(stderr, "Unable to create NvFBC grabber for adapter #%d.\n", cnt);
                //delete adapterSet[cnt];
                //adapterSet[cnt] = 0x0;	// clear adapter index so it is not used
            }
            else
            {
                iOk++;
            }
        }
        if ( iOk == 0 )
        {
            fprintf(stderr, "No NvFBC adapters found out of %d.\n", adapterCnt);
            return -1;
        }
    }
    else
    {
        fprintf(stderr, "Unable to create an IDirect3D9 instance\n");
        return -1;
    }

    //! Sleep so that ToSysSetUp can refresh the screen
    Sleep(100);

    //! Grab one frame for each adapter
    for(UINT cnt = 0; cnt < adapterCnt; ++cnt)
    {
        //! Check if grab was successful
        if(!adapterSet[cnt].grabFrame())
        {
            fprintf(stderr, "Failed grabbing for adapter %d\n", cnt);
            continue;
        }

        //! Save image for this adapter as a bitmap.
        int width = 0, height = 0;
        BYTE *imageData = (BYTE *)adapterSet[cnt].getFrameBuffer(width, height);
        char fileName[20] = {0};

        _snprintf_s(fileName, 20, 19, "multihead%d.bmp", cnt);

        SaveARGB(fileName, imageData, width, height, width);

        fprintf (stderr, "Grab succeeded. Wrote %s.\n", fileName );
    }

    delete [] adapterSet;

    return 0;
}

